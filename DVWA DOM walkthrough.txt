DOM Based Cross site scripting (or XSS) is a type of 'Injection  attack'. Cross site scripting is abusing the functions of an application to create malicious javascript. DOM based xxs uses the HTML as a vector of attack
 
we have a drop down that asks us to choose a language.

 
After choosing english I noticed that in the URL parameter changed to 'English'

 
I then try to change the parameter in the address bar from  '"?default=english" to "default=QWERTY". I chose the word at random and has nothing to do with the vulernability.

 
The word 'QWERTY' now appears as the language . We know 'QWERTY' is not a language choice so we investigate further.
 
by right clicking the box we can select to use the ' Inspect(Q)'

 

 
The html is not only giving the value of QWERTY but also writing it outside the the closed html
 
In this example I switched the language using the selector to 'French' so i could see how the script was meant to the used. Under the inspector on the right, we see that this script is in a <select> ( which is the drop down element) The <select > name="default" is the lever that is taking the input that is given after "/?default=" and putting it into the script. The script was using 'document.write' into an <option> tag that is creating.
If the script is putting whatever I write into the value of the drop down element, I will try to put html inside, to end the script prematurely and escape it, there by allowing myself to then add my own html or scripts. 

 
I close off the script that the "?default=" by using " ' >". then I attempt to escape the <option><select> by using a backward slash.
 
Now I see if I can add some innocent html of my own into the mix

 
As we see T3ST came up and in bold.

 
Having the words change to T3ST and bold doesn't seem so harmful, so I try to make a <script>alert()</script> pop up.


 

Well that still doesn't seem harmful enough, So in the place of the pop up, we can add a malcious redirect to a site of our choosing.
 

The DVWA purposeful vulnerable web app has the ability to increase the security levels, so some vectors won't work, and we need to start being creative
 
Here I attempt to insert QWERTY into the text
 

I now attempt to add an <script>alert()</script> pop up
 
but it doesn't work.

 
We can see that there is a filter for "<script>"

 
We attempt to add an img src tag. Well adding an image source doesn't sounds so harmful, if as we see above I point the image source = x. There is obviously no image source as x - which will cause an error.
 
then we state that ' on error ' and the attribute ' on error' still takes arbitrary javascript

 
and here we have it function 





 













